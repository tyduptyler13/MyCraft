'use strict';THREE.ShaderLib.sky={uniforms:{F:{type:"f",value:1},J:{type:"f",value:2},I:{type:"f",value:1},G:{type:"f",value:.005},H:{type:"f",value:.8},S:{type:"v3",value:new THREE.Vector3},distance:{type:"f",value:45E4}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D skySampler;\nuniform vec3 sunPosition;\nuniform float distance;\nvarying vec3 vWorldPosition;\nvec3 cameraPos = vec3(0., 0., 0.);\n// uniform sampler2D sDiffuse;\n// const float turbidity = 10.0; //\n// const float reileigh = 2.; //\n// const float luminance = 1.0; //\n// const float mieCoefficient = 0.005;\n// const float mieDirectionalG = 0.8;\nuniform float luminance;\nuniform float turbidity;\nuniform float reileigh;\nuniform float mieCoefficient;\nuniform float mieDirectionalG;\n// constants for atmospheric scattering\nconst float e = 2.71828182845904523536028747135266249775724709369995957;\nconst float pi = 3.141592653589793238462643383279502884197169;\nconst float n = 1.0003; // refractive index of air\nconst float N = 2.545E25; // number of molecules per unit volume for air at\n// 288.15K and 1013mb (sea level -45 celsius)\nconst float pn = 0.035;\t// depolatization factor for standard air\n// wavelength of used primaries, according to preetham\nconst vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\n// mie stuff\n// K coefficient for the primaries\nconst vec3 K = vec3(0.686, 0.678, 0.666);\nconst float v = 4.0;\n// optical length at zenith for molecules\nconst float rayleighZenithLength = 8.4E3;\nconst float mieZenithLength = 1.25E3;\nconst vec3 up = vec3(0.0, 1.0, 0.0);\nconst float EE = 1000.0;\nconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n// 66 arc seconds -> degrees, and the cosine of that\n// earth shadow hack\nconst float cutoffAngle = pi/1.95;\nconst float steepness = 1.5;\nvec3 totalRayleigh(vec3 lambda)\n{\nreturn (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\n}\n// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\nvec3 simplifiedRayleigh()\n{\nreturn 0.0005 / vec3(94, 40, 18);\n}\nfloat rayleighPhase(float cosTheta)\n{\t \nreturn (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\n//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\n//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\n}\nvec3 totalMie(vec3 lambda, vec3 K, float T)\n{\nfloat c = (0.2 * T ) * 10E-18;\nreturn 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\n}\nfloat hgPhase(float cosTheta, float g)\n{\nreturn (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\n}\nfloat sunIntensity(float zenithAngleCos)\n{\nreturn EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));\n}\n// float logLuminance(vec3 c)\n// {\n// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\n// }\n// Filmic ToneMapping http://filmicgames.com/archives/75\nfloat A = 0.15;\nfloat B = 0.50;\nfloat C = 0.10;\nfloat D = 0.20;\nfloat E = 0.02;\nfloat F = 0.30;\nfloat W = 1000.0;\nvec3 Uncharted2Tonemap(vec3 x)\n{\nreturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\nvoid main() \n{\nfloat sunfade = 1.0-clamp(1.0-exp((sunPosition.y/distance)),0.0,1.0);\n// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\n// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\nfloat reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\nvec3 sunDirection = normalize(sunPosition);\nfloat sunE = sunIntensity(dot(sunDirection, up));\n// extinction (absorbtion + out scattering) \n// rayleigh coefficients\nvec3 betaR = simplifiedRayleigh() * reileighCoefficient;\n// mie coefficients\nvec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\n// optical length\n// cutoff angle at 90 to avoid singularity in next formula.\nfloat zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\nfloat sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\nfloat sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\n// combined extinction factor\t\nvec3 Fex = exp(-(betaR * sR + betaM * sM));\n// in scattering\nfloat cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);\nfloat rPhase = rayleighPhase(cosTheta*0.5+0.5);\nvec3 betaRTheta = betaR * rPhase;\nfloat mPhase = hgPhase(cosTheta, mieDirectionalG);\nvec3 betaMTheta = betaM * mPhase;\nvec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\nLin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\n//nightsky\nvec3 direction = normalize(vWorldPosition - cameraPos);\nfloat theta = acos(direction.y); // elevation --\x3e y-axis, [-pi/2, pi/2]\nfloat phi = atan(direction.z, direction.x); // azimuth --\x3e x-axis [-pi/2, pi/2]\nvec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\n// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\nvec3 L0 = vec3(0.1) * Fex;\n// composition + solar disc\n//if (cosTheta > sunAngularDiameterCos)\nfloat sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\n// if (normalize(vWorldPosition - cameraPos).y>0.0)\nL0 += (sunE * 19000.0 * Fex)*sundisk;\nvec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\nvec3 texColor = (Lin+L0);   \ntexColor *= 0.04 ;\ntexColor += vec3(0.0,0.001,0.0025)*0.3;\nfloat g_fMaxLuminance = 1.0;\nfloat fLumScaled = 0.1 / luminance;     \nfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \nfloat ExposureBias = fLumCompressed;\nvec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\nvec3 color = curr*whiteScale;\nvec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\ngl_FragColor.rgb = retColor;\ngl_FragColor.a = 1.0;\n}"};
THREE.M=function(){var a=5E3;if(void 0===a||null===a)a=5E3;var b=THREE.ShaderLib.sky,c=THREE.UniformsUtils.clone(b.uniforms),b=new THREE.ShaderMaterial({fragmentShader:b.fragmentShader,vertexShader:b.vertexShader,uniforms:c,side:THREE.BackSide}),a=new THREE.SphereBufferGeometry(a,32,15);this.f=new THREE.Mesh(a,b);this.uniforms=c};function k(a,b){function c(a){return function(){e.u.push(a);if(0!==e.K.length){var b=e.K.shift();n(e,b.data,b.callback)}}}this.u=[];this.K=[];this.C=[];this.valid=!0;b=b||navigator.W;for(var e=this,d=0;d<b;++d){var g=new Worker(a);$(g).on("message",c(d));$(g).on("error",function(a){console.error("An error has occured on a thread!",a)});this.C.push(g);this.u.push(d)}}k.prototype.destroy=function(){this.C.forEach(function(a){a.terminate()});this.valid=!1};
function n(a,b,c){if(!a.valid)throw Error("Invalid state. This pool was destroyed. No workers available.");if(0<a.u.length){var e=a.u.pop();$(a.C[e]).one("message",function(a){c(a.originalEvent)});a.C[e].postMessage(b.buffer,[b.buffer])}else a.K.push({data:b,callback:c})};function p(a){this.i=new THREE.Object3D;var b=new THREE.Object3D;b.add(a.camera);this.i.add(b);b.position.y=1.7;var c=!1;$("#game > canvas").click(function(){c=!0;this.aa()});$(document).on("pointerlockerror",function(){throw Error("Failed to aquire the pointer. Game will not work.");}).on("pointerlockchange",function(){null===document.Z&&(c=!1,console.log("Disabled pointer lock."))});$(document).keydown(function(){});$(document).keyup(function(a){switch(a.which){case 27:c=!1}});var e=this,d=Math.PI/
2;$(document).mousemove(function(a){if(!0===c){var f=a.originalEvent.Y;e.i.rotation.y-=.002*a.originalEvent.X;b.rotation.x-=.0015*f;b.rotation.x=Math.max(-d,Math.min(d,b.rotation.x))}});a.tasks.push(function(){})}Object.defineProperties(p.prototype,{f:{configurable:!0,enumerable:!0,get:function(){return this.i}},position:{configurable:!0,enumerable:!0,get:function(){return this.i.position},set:function(a){this.i.position.copy(a)}}});(function(){var a={},b={},c=new THREE.TextureLoader,e={},d=new THREE.MultiMaterial,g=d.visible=!1,f=[];API.O=function(d,h){a[d]?h(a[d]):async.each(["diffuseMap","normalMap","specularMap"],function(a,h){e[d][a]?c.load(e[d][a],function(c){b[d]||(b[d]={});b[d][a]=c;c.wrapS=c.wrapT=THREE.RepeatWrapping;h()},function(){},function(){h(Error("Texture failed to load."))}):h()},function(c){if(c)throw c;c=new THREE.MeshPhongMaterial({map:b[d].diffuseMap,specularMap:b[d].specularMap,normalMap:b[d].normalMap,
name:e[d].name});a[d]=c;h(c)})};$.ajax({url:"blocks.json",success:function(a){e=a;var b=[];async.forEachOf(a,function(a,c,d){0<=c?API.O(c,function(a){d();b[c]=a}):d()},function(a){a&&console.error("Unable to prefetch the required textures.");d.materials=b;g=d.visible=!0;f.forEach(function(a){try{a()}catch(b){console.warn("Failed to call callback!",b)}})})},error:function(a,b,c){console.log(a,b,c)}});API.getTexture=function(a,c){return b[a][c]};API.V=function(){return b};API.R=function(a){for(var c in b)for(var d in b[c]){var e=
b[c][d];e.anisotropy=a;e.needsUpdate=!0}};API.N=function(){return d};API.P=function(a){g?a():f.push(a)}})();var q=new k("js/ChunkOptimizer.min.js");
function r(a){this.m=new Int8Array(512);this.A=new THREE.Object3D;this.L=!1;var b=this.geometry=new THREE.BufferGeometry;this.attributes={position:new THREE.BufferAttribute(new Float32Array,3),index:new THREE.BufferAttribute(new Uint16Array,1),uv:new THREE.BufferAttribute(new Float32Array,2),normal:new THREE.BufferAttribute(new Float32Array,3)};b.addAttribute("position",this.attributes.position);b.addAttribute("uv",this.attributes.uv);b.addAttribute("normal",this.attributes.normal);b.setIndex(this.attributes.index);
this.f=new THREE.Mesh(b,API.N());0!==a&&this.fill(a)}r.prototype.at=function(a,b,c){return this.m[a+8*b+64*c]};r.prototype.set=function(a,b,c,e){a=a+8*b+64*c;if(0>a||511<a)throw Error("Out of bounds.");this.m[a]=e};r.prototype.fill=function(a){this.m.fill(a)};
r.prototype.update=function(){var a=this;n(q,this.m.slice(0),function(b){b=b.data;a.attributes.position.array=new Float32Array(b.position);a.attributes.position.needsUpdate=!0;a.attributes.normal.array=new Float32Array(b.normals);a.attributes.normal.needsUpdate=!0;a.attributes.uv.array=new Float32Array(b.uvs);a.attributes.uv.needsUpdate=!0;a.attributes.index.array=new Uint16Array(b.indices);a.attributes.index.needsUpdate=!0;b=new Uint8Array(b.materialIndex);a.geometry.clearGroups();for(var c=0;c<
b.length;++c)a.geometry.addGroup(36*c,36,b[c]);a.L||(API.P(function(){a.A.add(a.f)}),a.L=!0)})};Object.defineProperties(r.prototype,{position:{configurable:!0,enumerable:!0,get:function(){return this.A.position},set:function(a){this.A.position.copy(a)}}});Object.defineProperties(r,{material:{configurable:!0,enumerable:!0,get:function(){}}});function w(){var a=$(window),b=a.width(),c=a.height();this.chunks=[];this.j=new THREE.Scene;this.tasks=[];this.D=new THREE.AmbientLight(4210752);this.j.add(this.D);var e=this.v=new THREE.WebGLRenderer({antialias:!0});this.v.setSize(b,c);var d=this.camera=new THREE.PerspectiveCamera(45,b/c,.1,1E4,b,c);a.resize(function(){b=a.width();c=a.height();d.aspect=b/c;d.updateProjectionMatrix();e.setSize(b,c)});API.ba=function(a){d.fov=a;d.updateProjectionMatrix()};$("#game").append(this.v.domElement);this.i=
new p(this);this.j.add(this.i.f);z(this);A(this,this.i);this.T=new THREE.Clock(!0);this.B=new Stats;$(this.B.domElement).css({position:"absolute",left:"0",top:"0"});$("body").append(this.B.domElement);B(this);C(this)}function C(a){var b=a.T.getDelta();a.B.begin();a.update(b);a.v.render(a.j,a.camera);a.B.end();requestAnimationFrame(function(){C(a)})}w.prototype.update=function(a){var b=this;$.each(this.tasks,function(c,e){e.call(b,a)})};
function A(a,b){function c(a){l.J.value=a.J;l.I.value=a.I;l.F.value=a.F;l.G.value=a.G;l.H.value=a.H;var b=Math.PI*(a.o-.5);a=2*Math.PI*(a.azimuth-.5);d.position.x=5E3*Math.cos(a);d.position.y=5E3*Math.sin(a)*Math.sin(b);d.position.z=5E3*Math.sin(a)*Math.cos(b);f.uniforms.S.value.copy(d.position)}var e={J:10,I:2,G:.005,H:.8,F:1,o:.49,azimuth:.25};e.o=Date.now()/18E5%2;var d=new THREE.Mesh(new THREE.SphereBufferGeometry(2E4,16,8),new THREE.MeshBasicMaterial({color:16777215}));d.visible=!1;d.fog=!1;
var g=new THREE.DirectionalLight(16777215,1);g.position.copy(d.position);g.position.normalize();a.j.add(g);var f=new THREE.M;f.f.frustumCulled=!1;f.f.add(d);f.f.position.copy(b.position);a.j.add(f.f);f.f.fog=!1;a.j.fog=new THREE.FogExp2(0,.0025);for(var m=new THREE.Object3D,h=new THREE.Geometry,t=0;1E4>t;++t){var u=new THREE.Vector3(Math.random()-.5,Math.random()-.5,Math.random()-.5);u.normalize().multiplyScalar(4500);h.vertices.push(u)}var v=new THREE.PointsMaterial({size:1,blending:THREE.AdditiveBlending,
sizeAttenuation:!1,color:16777215,fog:!1,transparent:!0}),h=new THREE.Points(h,v);h.frustumCulled=!1;m.add(h);m.position.copy(b.position);a.j.add(m);var l=f.uniforms;l.distance.value=5E3;c(e);var x=new THREE.Color(6216),y=(new THREE.Color(16777215)).multiplyScalar(.7);a.tasks.push(function(){e.o=Date.now()/18E5%2;v.opacity=Math.pow(1-Math.abs(1-e.o),2);g.intensity=THREE.Math.clamp(d.position.y+1,0,1);0<d.position.y?this.D.color.copy(x.clone().lerp(y,d.position.y/1E4+.5)):this.D.color.copy(y.clone().lerp(x,
-d.position.y/1E4+.5));c(e);g.position.copy(d.position);g.position.normalize();m.position.copy(b.position);m.lookAt(d.position);f.f.position.copy(b.position)})}function z(a){for(var b=0;10>b;++b)for(var c=0;4>c;++c)for(var e=0;10>e;++e){var d=new r(1);d.position.set(8*(b-5),8*(c-4),8*(e-5));a.j.add(d.A);a.chunks.push(d);d.update()}}
function B(a){$("#settingsButton").click(function(){$("#settings").slideToggle()});a=a.v.getMaxAnisotropy();for(var b=$("#anisotropy"),c=2;c<=a;c*=2)b.append('<option value="'+c+'">'+c+"</option>");b.prop("disabled",!1);b.change(function(){var a=b.find(":selected").val();API.R(Number(a))})}$(function(){window.U=new w});
