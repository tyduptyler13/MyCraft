'use strict';var ThreadPool=function(a,c){this.readyThreads=[];this.work=[];this.threads=[];this.valid=!0;c=c||navigator.hardwareConcurrency||12;for(var b=this,d=function(a){return function(){b.readyThreads.push(a);if(0!==b.work.length){var c=b.work.shift();b.run(c.data,c.callback)}}},e=0;e<c;++e){var g=new Worker(a);$(g).on("message",d(e));$(g).on("error",function(a){console.error("An error has occured on a thread!",a)});this.threads.push(g);this.readyThreads.push(e)}};
ThreadPool.prototype.destroy=function(){this.threads.forEach(function(a){a.terminate()});this.valid=!1};ThreadPool.prototype.run=function(a,c){if(!this.valid)throw Error("Invalid state. This pool was destroyed. No workers available.");if(0<this.readyThreads.length){var b=this.readyThreads.pop();$(this.threads[b]).one("message",function(a){c(a.originalEvent)});this.threads[b].postMessage(a.buffer,[a.buffer])}else this.work.push({data:a,callback:c})};THREE.ShaderLib.sky={uniforms:{luminance:{type:"f",value:1},turbidity:{type:"f",value:2},reileigh:{type:"f",value:1},mieCoefficient:{type:"f",value:.005},mieDirectionalG:{type:"f",value:.8},sunPosition:{type:"v3",value:new THREE.Vector3},distance:{type:"f",value:45E4}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
fragmentShader:"uniform sampler2D skySampler;\nuniform vec3 sunPosition;\nuniform float distance;\nvarying vec3 vWorldPosition;\n//vec3 cameraPos = vec3(0., 0., 0.);\n// uniform sampler2D sDiffuse;\nconst float turbidity = 10.0; //\nconst float reileigh = 2.; //\n// const float luminance = 1.0; //\nconst float mieCoefficient = 0.005;\nconst float mieDirectionalG = 0.8;\nuniform float luminance;\n//uniform float turbidity;\n//uniform float reileigh;\n//uniform float mieCoefficient;\n//uniform float mieDirectionalG;\n// constants for atmospheric scattering\nconst float e = 2.71828182845904523536028747135266249775724709369995957;\nconst float pi = 3.141592653589793238462643383279502884197169;\nconst float n = 1.0003; // refractive index of air\nconst float N = 2.545E25; // number of molecules per unit volume for air at\n// 288.15K and 1013mb (sea level -45 celsius)\nconst float pn = 0.035;\t// depolatization factor for standard air\n// wavelength of used primaries, according to preetham\nconst vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\n// mie stuff\n// K coefficient for the primaries\nconst vec3 K = vec3(0.686, 0.678, 0.666);\nconst float v = 4.0;\n// optical length at zenith for molecules\nconst float rayleighZenithLength = 8.4E3;\nconst float mieZenithLength = 1.25E3;\nconst vec3 up = vec3(0.0, 1.0, 0.0);\nconst float EE = 1000.0;\nconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n// 66 arc seconds -> degrees, and the cosine of that\n// earth shadow hack\nconst float cutoffAngle = pi/1.95;\nconst float steepness = 1.5;\nvec3 totalRayleigh(vec3 lambda)\n{\nreturn (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\n}\n// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\nvec3 simplifiedRayleigh()\n{\nreturn 0.0005 / vec3(94, 40, 18);\n}\nfloat rayleighPhase(float cosTheta)\n{\t \nreturn (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\n//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\n//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\n}\nvec3 totalMie(vec3 lambda, vec3 K, float T)\n{\nfloat c = (0.2 * T ) * 10E-18;\nreturn 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\n}\nfloat hgPhase(float cosTheta, float g)\n{\nreturn (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\n}\nfloat sunIntensity(float zenithAngleCos)\n{\nreturn EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));\n}\n// float logLuminance(vec3 c)\n// {\n// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\n// }\n// Filmic ToneMapping http://filmicgames.com/archives/75\nfloat A = 0.15;\nfloat B = 0.50;\nfloat C = 0.10;\nfloat D = 0.20;\nfloat E = 0.02;\nfloat F = 0.30;\nfloat W = 1000.0;\nvec3 Uncharted2Tonemap(vec3 x)\n{\nreturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\nvoid main() \n{\nfloat sunfade = 1.0-clamp(1.0-exp((sunPosition.y/distance)),0.0,1.0);\n// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\n// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\nfloat reileighCoefficient = reileigh - (1.0* (1.0-sunfade));\nvec3 sunDirection = normalize(sunPosition);\nfloat sunE = sunIntensity(dot(sunDirection, up));\n// extinction (absorbtion + out scattering) \n// rayleigh coefficients\nvec3 betaR = simplifiedRayleigh() * reileighCoefficient;\n// mie coefficients\nvec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\n// optical length\n// cutoff angle at 90 to avoid singularity in next formula.\nfloat zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPosition))));\nfloat sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\nfloat sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\n// combined extinction factor\t\nvec3 Fex = exp(-(betaR * sR + betaM * sM));\n// in scattering\nfloat cosTheta = dot(normalize(vWorldPosition - cameraPosition), sunDirection);\nfloat rPhase = rayleighPhase(cosTheta*0.5+0.5);\nvec3 betaRTheta = betaR * rPhase;\nfloat mPhase = hgPhase(cosTheta, mieDirectionalG);\nvec3 betaMTheta = betaM * mPhase;\nvec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\nLin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\n//nightsky\nvec3 direction = normalize(vWorldPosition - cameraPosition);\nfloat theta = acos(direction.y); // elevation --\x3e y-axis, [-pi/2, pi/2]\nfloat phi = atan(direction.z, direction.x); // azimuth --\x3e x-axis [-pi/2, pi/2]\nvec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\n// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\nvec3 L0 = vec3(0.1) * Fex;\n// composition + solar disc\n//if (cosTheta > sunAngularDiameterCos)\nfloat sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\n// if (normalize(vWorldPosition - cameraPosition).y>0.0)\nL0 += (sunE * 19000.0 * Fex)*sundisk;\nvec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\nvec3 texColor = (Lin+L0);   \ntexColor *= 0.04 ;\ntexColor += vec3(0.0,0.001,0.0025)*0.3;\nfloat g_fMaxLuminance = 1.0;\nfloat fLumScaled = 0.1 / luminance;     \nfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); \nfloat ExposureBias = fLumCompressed;\nvec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\nvec3 color = curr*whiteScale;\nvec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\ngl_FragColor.rgb = retColor;\ngl_FragColor.a = 1.0;\n}"};
THREE.Sky=function(a){if(void 0===a||null===a)a=5E3;var c=THREE.ShaderLib.sky,b=THREE.UniformsUtils.clone(c.uniforms),c=new THREE.ShaderMaterial({fragmentShader:c.fragmentShader,vertexShader:c.vertexShader,uniforms:b,side:THREE.BackSide});a=new THREE.SphereBufferGeometry(a,32,15);this.mesh=new THREE.Mesh(a,c);this.uniforms=b};(function(){var a={},c={},b=new THREE.TextureLoader,d={},e=new THREE.MultiMaterial,g=e.visible=!1,m=[];API.getMaterial=function(f,e){a[f]?e(a[f]):async.each(["diffuseMap","normalMap","specularMap"],function(a,e){d[f][a]?b.load(d[f][a],function(b){c[f]||(c[f]={});c[f][a]=b;b.wrapS=b.wrapT=THREE.RepeatWrapping;e()},function(){},function(){e(Error("Texture failed to load."))}):e()},function(b){if(b)throw b;b={map:c[f].diffuseMap,name:d[f].name};c[f].specularMap&&(b.specularMap=c[f].specularMap);c[f].normalMap&&
(b.normalMap=c[f].normalMap);b=new THREE.MeshPhongMaterial(b);a[f]=b;e(b)})};$.ajax({url:"blocks.json",success:function(a){d=a;var c=[];async.forEachOf(a,function(a,b,d){0<=b?API.getMaterial(b,function(a){d();c[b]=a}):d()},function(a){a&&console.error("Unable to prefetch the required textures.");e.materials=c;g=e.visible=!0;m.forEach(function(a){try{a()}catch(c){console.warn("Failed to call callback!",c)}})})},error:function(a,c,b){console.log(a,c,b)}});API.getTexture=function(a,b){return c[a][b]};
API.getTextures=function(){return c};API.setAnisotropy=function(a){for(var b in c)for(var d in c[b]){var e=c[b][d];e.anisotropy=a;e.needsUpdate=!0}};API.getBlockMaterial=function(){return e};API.onBlocksReady=function(a){g?a():m.push(a)}})();
var chunkPool=new ThreadPool("js/ChunkOptimizer.min.js"),Chunk=function(a){this.blocks=new Int8Array(4096);this.space=new THREE.Object3D;this.added=!1;var c=this.geometry=new THREE.BufferGeometry;this.attributes={position:new THREE.BufferAttribute(new Float32Array,3),uv:new THREE.BufferAttribute(new Float32Array,2),normal:new THREE.BufferAttribute(new Float32Array,3)};c.addAttribute("position",this.attributes.position);c.addAttribute("uv",this.attributes.uv);c.addAttribute("normal",this.attributes.normal);
this.mesh=new THREE.Mesh(c,API.getBlockMaterial());this.mesh.receiveShadow=!0;this.mesh.castShadow=!0;this.mesh.userData.chunk=this;this._metaBlocks=[];0!==a&&this.fill(a)};Chunk.prototype.at=function(a,c,b){return this.blocks[a+16*c+256*b]};Chunk.getPos=function(a){return[a&15,a>>4&15,a>>8&15]};Chunk.prototype.set=function(a,c,b,d){a=a+16*c+256*b;if(0>a||4096<=a)throw Error("Out of bounds.");this.blocks[a]=d};Chunk.prototype.fill=function(a){this.blocks.fill(a)};
Chunk.prototype.walk=function(a){for(var c=0,b=0;16>b;++b)for(var d=0;16>d;++d)for(var e=0;16>e;++e,++c)a(this.blocks[c],e,d,b,c)};
Chunk.prototype.update=function(){var a=this;chunkPool.run(this.blocks.slice(0),function(c){c=c.data;a.attributes.position.array=new Float32Array(c.position);a.attributes.position.needsUpdate=!0;a.attributes.normal.array=new Float32Array(c.normals);a.attributes.normal.needsUpdate=!0;a.attributes.uv.array=new Float32Array(c.uvs);a.attributes.uv.needsUpdate=!0;c=new Uint8Array(c.materialIndex);a.geometry.clearGroups();for(var b=0;b<c.length;++b)a.geometry.addGroup(108*b,108,c[b]);0===c.length&&(a.space.visible=
!1);a.added||(API.onBlocksReady(function(){a.space.add(a.mesh)}),a.added=!0);a.space.visible=0===a.geometry.attributes.position.count?!1:!0})};Object.defineProperties(Chunk.prototype,{position:{configurable:!0,enumerable:!0,get:function(){return this.space.position},set:function(a){this.space.position.copy(a)}}});Object.defineProperties(Chunk,{material:{configurable:!0,enumerable:!0,get:function(){API.getBlockMaterial()}}});var Player=function(a){this.player=new THREE.Object3D;this.camera=a.camera;this.head=new THREE.Object3D;this.head.add(a.camera);this.player.add(this.head);this.head.position.y=1.7;var c=!1;$("#game > canvas").click(function(){c=!0;this.requestPointerLock=this.requestPointerLock||this.mozRequestPointerLock||this.webkitRequestPointerLock;this.requestPointerLock()});$(document).on("pointerlockerror",function(){throw Error("Failed to aquire the pointer. Game will not work.");}).on("pointerlockchange",
function(){null===document.pointerLockElement&&(c=!1,console.log("Disabled pointer lock."))});var b={up:!1,left:!1,right:!1,back:!1,jump:!1,crouch:!1};$(document).keydown(function(a){switch(a.which){case 38:case 87:b.up=!0;break;case 37:case 65:b.left=!0;break;case 40:case 83:b.back=!0;break;case 39:case 68:b.right=!0;break;case 32:b.jump=!0;break;case 16:b.crouch=!0}});$(document).keyup(function(a){switch(a.which){case 27:c=!1;break;case 38:case 87:b.up=!1;break;case 37:case 65:b.left=!1;break;case 40:case 83:b.back=
!1;break;case 39:case 68:b.right=!1;break;case 32:b.jump=!1;break;case 16:b.crouch=!1}});var d=this,e=Math.PI/2;$(document).mousemove(function(a){if(!0===c){var b=a.originalEvent.movementY;d.player.rotation.y-=.002*a.originalEvent.movementX;d.head.rotation.x-=.0015*b;d.head.rotation.x=Math.max(-e,Math.min(e,d.head.rotation.x))}});var g=function(){var b=new THREE.Mesh(new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:"white",fog:!1,wireframe:!0}));b.scale.multiplyScalar(1.01);a.scene.add(b);
var c=new THREE.Raycaster;c.far=10;var d=new THREE.Vector2,e=new THREE.Vector3;return function(){c.setFromCamera(d,a.camera);var g=c.intersectObjects(a.scene.children,!0);if(0!==g.length)for(var l=0,n=g.length;l<n;++l)if(g[l].object.userData.chunk){e.subVectors(g[l].point,g[l].face.normal);g=g[l].face.normal;0<g.x+g.y+g.z?b.position.copy(e.floor().addScalar(.5)):b.position.copy(e.ceil().subScalar(.5));b.visible=!0;return}b.visible=!1}}();a.tasks.push(function(a){c&&(d.move(b,a),g())})};
Player.prototype.move=function(a,c){var b=a.up?-1:a.back?1:0,d=a.left?-1:a.right?1:0,e=a.jump?1:a.crouch?-1:0;if(b||d||e)b=new THREE.Vector3(d,0,b),b.applyEuler(this.head.getWorldRotation()),b.y=e?e:b.y,b.normalize(),b.multiplyScalar(5*c),this.position.add(b)};Object.defineProperties(Player.prototype,{mesh:{configurable:!0,enumerable:!0,get:function(){return this.player}},position:{configurable:!0,enumerable:!0,get:function(){return this.player.position},set:function(a){this.player.position.copy(a)}}});$(function(){API.addToolbarButton=function(){var a=$("#toolbar");return function(c){a.append(c)}}()});var MyCraft=function(){var a=$(window),c=a.width(),b=a.height();this.chunks={};this.scene=new THREE.Scene;this.tasks=[];this.ambientLight=new THREE.AmbientLight(4210752);this.scene.add(this.ambientLight);var d=this.renderer=new THREE.WebGLRenderer({antialias:!0});this.renderer.setSize(c,b);d.shadowMap.enabled=!0;d.shadowMap.type=THREE.PCFSoftShadowMap;var e=this.camera=new THREE.PerspectiveCamera(75,c/b,.1,100,c,b);a.resize(function(){c=a.width();b=a.height();e.aspect=c/b;e.updateProjectionMatrix();
d.setSize(c,b)});API.setFOV=function(a){e.fov=a;e.updateProjectionMatrix()};$("#game").append(this.renderer.domElement);this.setupPlayer();this.setupChunks();this.setupSky(90,this.player);this.timer=new THREE.Clock(!0);this.stats=new Stats;$(this.stats.domElement).css({position:"absolute",left:"0",top:"0"});$("body").append(this.stats.domElement);this.setupUI();this.render()};
MyCraft.prototype.render=function(){var a=!0;API.setVsync=function(c){a=c;$("#vsync").val(c)};$(function(){$("#vsync").change(function(){API.setVsync($(this).is(":checked"))})});return function(){var c=this.timer.getDelta();this.stats.begin();this.update(c);this.renderer.render(this.scene,this.camera);this.stats.end();c=this.render.bind(this);a?requestAnimationFrame(c):async.nextTick(c)}}();MyCraft.prototype.setupPlayer=function(){this.player=new Player(this);this.scene.add(this.player.mesh)};
MyCraft.prototype.update=function(a){var c=this;async.each(this.tasks,function(b,d){b.call(c,a);d()})};
MyCraft.prototype.setupSky=function(a,c){var b={luminance:1,inclination:.49,azimuth:.3};b.inclination=Date.now()/18E5%2;var d=new THREE.Mesh(new THREE.SphereBufferGeometry(5,16,8),new THREE.MeshBasicMaterial({color:16777215}));d.frustumCulled=!1;d.visible=!1;d.fog=!1;var e=new THREE.DirectionalLight(16777215,1);e.position.copy(d.position);e.castShadow=!0;e.shadow.camera.near=1;e.shadow.camera.far=132;e.shadow.camera.left=-32;e.shadow.camera.right=32;e.shadow.camera.top=32;e.shadow.camera.bottom=-32;
e.shadow.mapSize.width=2048;e.shadow.mapSize.height=2048;e.target=this.player.mesh;var g=new THREE.Sky(a);g.mesh.frustumCulled=!1;g.mesh.add(d);g.mesh.add(e);g.mesh.position.copy(c.position);this.scene.add(g.mesh);g.mesh.fog=!1;this.scene.fog=new THREE.FogExp2(0,.02);for(var m=new THREE.Object3D,f=new THREE.Geometry,k=.95*a,h=0;1E4>h;++h){var p=new THREE.Vector3(Math.random()-.5,Math.random()-.5,Math.random()-.5);p.normalize().multiplyScalar(k);f.vertices.push(p)}var l=new THREE.PointsMaterial({size:1,
blending:THREE.AdditiveBlending,sizeAttenuation:!1,color:16777215,fog:!1,transparent:!0}),f=new THREE.Points(f,l);f.frustumCulled=!1;m.add(f);g.mesh.add(m);var n=g.uniforms;n.distance.value=a;var q=function(b){n.luminance.value=b.luminance;var c=Math.PI*(b.inclination-.5);b=2*Math.PI*(b.azimuth-.5);d.position.x=a*Math.cos(b);d.position.y=a*Math.sin(b)*Math.sin(c);d.position.z=a*Math.sin(b)*Math.cos(c);g.uniforms.sunPosition.value.copy(d.position)};q(b);var r=new THREE.Color(6216),t=(new THREE.Color(16777215)).multiplyScalar(.5),
u=this;this.tasks.push(function(){b.inclination=Date.now()/18E5%2;l.opacity=Math.pow(1-Math.abs(1-b.inclination),2);e.intensity=THREE.Math.clamp(d.position.y+1,0,1);0<d.position.y?u.ambientLight.color.copy(r.clone().lerp(t,d.position.y/100)):u.ambientLight.color.copy(t.clone().lerp(r,-d.position.y/100));q(b);e.position.copy(d.position);g.mesh.position.copy(c.position);m.lookAt(d.position)})};
MyCraft.prototype.setupChunks=function(){for(var a=this,c=function(b,c){for(var d=new Chunk(Math.floor(9*Math.random()-2)),f=Math.floor(16*Math.random()),k=0;16>k;++k)for(var h=0;16>h;++h)d.set(k,f,h,-1);k=Math.floor(16*Math.random());for(f=0;16>f;++f)for(h=0;16>h;++h)d.set(k,f,h,-1);h=Math.floor(16*Math.random());for(f=0;16>f;++f)for(k=0;16>k;++k)d.set(k,f,h,-1);d.position.set(b,-16,c);a.scene.add(d.space);a.chunks[d.position.toArray().join(",")]=d;d.update()},b=-10;10>b;++b)for(var d=-10;10>d;++d)async.nextTick(c.bind(null,
16*b,16*d))};
MyCraft.prototype.setupUI=function(){$("#settingsButton").click(function(){var a=$("#settings");a.is(":visible")?(a.slideUp(),$("#overlay").css({"pointer-events":"none","background-color":"transparent"})):(a.slideDown(),$("#overlay").css({"pointer-events":"all","background-color":"rgba(0,0,0,.7)"}))});$(document).keydown(function(a){27==a.keyCode&&($("#settings").slideUp(),$("#overlay").css({"pointer-events":"none","background-color":"transparent"}))});for(var a=this.renderer.getMaxAnisotropy(),c=
$("#anisotropy"),b=2;b<=a;b*=2)c.append('<option value="'+b+'">'+b+"</option>");c.prop("disabled",!1);c.change(function(){var a=c.find(":selected").val();API.setAnisotropy(Number(a))})};$(function(){window.game=new MyCraft});
